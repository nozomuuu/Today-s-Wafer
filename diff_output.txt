diff --git a/src/App.js b/src/App.js
index 7d4a21c..53b388c 100644
--- a/src/App.js
+++ b/src/App.js
@@ -11,41 +11,77 @@ const waferClosed = `${process.env.PUBLIC_URL}/images/stickers/wafer1.webp`;
 const waferOpened = `${process.env.PUBLIC_URL}/images/stickers/wafer2.webp`;
 
 function App() {
+    // 初期状態の設定
     const [isOpened, setIsOpened] = useState(false);
     const [remaining, setRemaining] = useState(() => {
-        const savedRemaining = localStorage.getItem('remaining');
-        return savedRemaining ? parseInt(savedRemaining, 10) : 3;
+        try {
+            const savedRemaining = localStorage.getItem('remaining');
+            return savedRemaining ? parseInt(savedRemaining, 10) : 3;
+        } catch (error) {
+            console.error('Failed to load remaining from localStorage:', error);
+            return 3;
+        }
     });
+
     const [collectedStickers, setCollectedStickers] = useState(() => {
-        const savedStickers = localStorage.getItem('collectedStickers');
-        return savedStickers ? JSON.parse(savedStickers) : [];
+        try {
+            const savedStickers = localStorage.getItem('collectedStickers');
+            return savedStickers ? JSON.parse(savedStickers) : [];
+        } catch (error) {
+            console.error('Failed to load collectedStickers from localStorage:', error);
+            return [];
+        }
     });
+
     const [todayStickers, setTodayStickers] = useState([]);
     const [selectedSticker, setSelectedSticker] = useState(null);
     const [page, setPage] = useState("main");
     const [showTomorrowMessage, setShowTomorrowMessage] = useState(false);
     const [isOpening, setIsOpening] = useState(false);
 
+    // 日付チェックとリセット
     useEffect(() => {
         const today = new Date().toISOString().split('T')[0];
-        const lastAccessDate = localStorage.getItem('lastAccessDate') || today;
+        let lastAccessDate;
+        try {
+            lastAccessDate = localStorage.getItem('lastAccessDate') || today;
+        } catch (error) {
+            console.error('Failed to load lastAccessDate from localStorage:', error);
+            lastAccessDate = today;
+        }
 
         if (today !== lastAccessDate) {
             setRemaining(3);
             setTodayStickers([]);
-            localStorage.setItem('lastAccessDate', today);
-            localStorage.setItem('remaining', '3');
+            try {
+                localStorage.setItem('lastAccessDate', today);
+                localStorage.setItem('remaining', '3');
+            } catch (error) {
+                console.error('Failed to save lastAccessDate or remaining to localStorage:', error);
+            }
         }
     }, []);
 
+    // collectedStickers の変更時にローカルストレージに保存し、ログを表示
     useEffect(() => {
-        localStorage.setItem('collectedStickers', JSON.stringify(collectedStickers));
+        try {
+            localStorage.setItem('collectedStickers', JSON.stringify(collectedStickers));
+            console.log('Collected Stickers saved to localStorage:', localStorage.getItem('collectedStickers'));
+        } catch (error) {
+            console.error('Failed to save collectedStickers to localStorage:', error);
+        }
     }, [collectedStickers]);
 
+    // remaining の変更時にローカルストレージに保存
     useEffect(() => {
-        localStorage.setItem('remaining', remaining.toString());
+        try {
+            localStorage.setItem('remaining', remaining.toString());
+        } catch (error) {
+            console.error('Failed to save remaining to localStorage:', error);
+        }
     }, [remaining]);
 
+    // ウェハーを開ける処理
     const openWafer = useCallback(() => {
         if (remaining > 0 && !isOpening) {
             setIsOpening(true);
@@ -69,6 +105,7 @@ function App() {
         }
     }, [remaining, isOpening]);
 
+    // ウェハーのクリック処理
     const handleCardClick = useCallback((event) => {
         if (event.target.classList.contains("wafer-image")) {
             new Audio(viewStickersSound).play();
@@ -76,6 +113,7 @@ function App() {
         }
     }, [isOpened]);
 
+    // ステッカー詳細を閉じる処理
     const closeStickerDetail = useCallback(() => setSelectedSticker(null), []);
 
     return (
diff --git a/src/CollectionBook.js b/src/CollectionBook.js
index 2344d64..988aea4 100644
--- a/src/CollectionBook.js
+++ b/src/CollectionBook.js
@@ -68,7 +68,7 @@ const CollectionBook = ({ allStickers, ownedStickers, goBack }) => {
                 onClick={() => handleStickerClick(stickerSlots[j + cardIndex * 24])}
               >
                 <Sticker
-                  src={stickerSlots[j + cardIndex * 24]?.image || '/path/to/wafer-image.webp'}
+                  src={stickerSlots[j + cardIndex * 24]?.image || `${process.env.PUBLIC_URL}/images/stickers/wafer3.webp`}
                   alt={`Sticker ${j + 1}`}
                 />
               </div>
